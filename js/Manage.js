/*
 * File: Manage.js
 * Date: Thu Apr 07 2011 13:09:49 GMT-0300 (ADT)
 * 
 * This file was generated by Ext Designer version 1.1.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

function gotoEditModsPage() {
  // try to pull the PID from the ULR location bar but in the case of the root repository
  // this will be empty.  If it is empty then pass it as empty and not "undefined", which
  // is what will be passed if a non-existant string is used ... this is what will happen
  // with pid = window.location.pathname.split('/')[3] if there are not 4 elements.
  var pathnameArray = window.location.pathname.split('/');
  var pid = (pathnameArray.length >=4 ) ? pathnameArray[3] : "";
  var location = window.location;
  var page = location.protocol + '//' + location.host + '/formbuilder/edit/' + pid;
  window.location = page;
}

function gotoXACMLPage(pid, policy_url) {
  policy_url = typeof(policy_url) != 'undefined' ? policy_url : 'POLICY';
  pid = typeof(pid) != 'undefined' ? pid : 'undefined';
  pid = (pid) ? pid : window.location.pathname.split('/')[3];
  
  var location = window.location;
  var page = location.protocol + '//' + location.host + '/xacml/' + pid + '/' + policy_url;
  
  window.location = page;
}

function gotoFilesIngestPage(pid) {
  // test the pid to see if it is uninitialized or an empty string.  If this the case then
  // attempt to use the path name in the address bar.  If this is the root collection and
  // there is no PID appended to the URL in the location bar then the value of the variable
  // 'pid' will be set to the string "undefined" which will be sent to the form.
  pid = (!!pid) ? pid : window.location.pathname.split('/')[3];

  var location = window.location;
  var page = location.protocol + '//' + location.host + '/islandora_co_manager/ingest_files/' + pid;
  window.location = page;
}

Manage = Ext.extend(ManageUi, {
  initComponent: function() {
    Manage.superclass.initComponent.call(this);
    var manageDatastreamsPanel = this.get('adr-manage-datastreams');
    var toolbar = manageDatastreamsPanel.getTopToolbar();
    var add = toolbar.get('adr-edit-file-add');
    var edit = toolbar.get('adr-edit-file-edit');
    var download = toolbar.get('adr-edit-file-download');
    var remove = toolbar.get('adr-edit-file-delete');
    var viewer = manageDatastreamsPanel.get('adr-edit-file-list');
    var details = this.get('adr-manage-detailed-info');
    manageDatastreamsPanel.addListener('afterrender', function() {
      this.getFooterToolbar().doRefresh();
    });
    //var store = Ext.StoreMgr.lookup('Datastreams');
    //store.reload(store.lastOptions);

    // Add hidden download form.
    Ext.DomHelper.append('adr-collection-viewer', {
      tag: 'form',
      id: 'adr-edit-file-download-form',
      method: 'GET',
      action: '',
      style: 'display:none',
      children: [{
        tag: 'input',
        type: 'submit',
        value: 'Download',
        style: 'display:none'
      }]
    });

    add.disable();
    edit.disable();
    remove.disable();

    details.updateDetails = function(record) {
      this.tpl.overwrite(this.body, record.data);
    };

    if (UserCollectionPermissions.datastream_canAddStream) {
      add.enable();
      add.addListener('click', function(button, event) {
        gotoFilesIngestPage(ADRCollection.pid);
      });
    }
    
    download.addListener('click', function(button, event) {
      var records = viewer.getSelectedRecords();
      var record = records[0];
      if(record) {
        var url = record.get('download_url');
        var form = Ext.get('adr-edit-file-download-form');
        form.set({
          action: url
        });
        form.child('input').dom.click();
      }
    });
    
    if (UserCollectionPermissions.datastream_canDeleteStream) {
      remove.addListener('click', function(button, event) {
        var records = viewer.getSelectedRecords();
        var record = records[0];
        if(record) {
          var store = viewer.getStore();
          var pid = store.baseParams.pid;
          var dsid = record.get('dsid');
          Ext.Msg.confirm('Delete', 'Are you sure you want to delete this file?', function(btn, text){
            if (btn == 'yes') {
              Ext.Ajax.request({
                url: '/adrcollection/ajax/removeDatastream',
                success: function() {
                  var store = Ext.StoreMgr.lookup('Datastreams');
                  store.reload(store.lastOptions);
                },
                failure: function() {
                  Ext.Msg.alert('Failure', 'Could not delete file.');
                },
                params: {
                  pid: pid,
                  dsid: dsid
                }
              });
            }
          });
        }
      });
    }
    
    
    viewer.addListener('click', function(dataviewer, index, node, event) {
      var record = dataviewer.getStore().getAt(index);
      if(record) {
        var dsid = record.get('dsid');
        details.updateDetails(record);
        if(dsid == 'MODS') {
          if (UserCollectionPermissions.datastream_canEditStream) {
            edit.enable();
            edit.addListener('click', gotoEditModsPage);
          }
        }
        else {
          edit.disable();
          edit.removeListener('click', gotoEditModsPage);
        }
        if (UserCollectionPermissions.datastream_canDeleteStream) {
          remove.enable();
        }
        download.enable();
      }
      else {
        edit.disable();
        remove.disable();
        download.disable();
      }
    });
    // Object Properties Panel
    var editObjectToolbar = this.get('adr-manage-object-properties').getFooterToolbar();
    var editObject = editObjectToolbar.get('adr-manage-edit-object');
    var editObjectPermissions = editObjectToolbar.get('adr-manage-edit-object-permissions');
    var editChildPermissions = editObjectToolbar.get('adr-manage-edit-child-permissions');
    var deleteObject = editObjectToolbar.get('adr-manage-delete-object');
    
    // Permission to edit collections are assumed to be negative unless explicitly true.
    editObject.disable();
    if (UserCollectionPermissions.manage_canEditObjects) {
      editObject.enable();

      editObject.addListener('click', function(button, event) {
        var window = new EditObjectWindow();
        window.show(this);
      });
    }
    
    // Permission to edit permissions are assumed to be negative unless explicitly true.
    editObjectPermissions.disable();
    if (UserCollectionPermissions.manage_canEditPermissions) {
      editObjectPermissions.enable();
    
      editObjectPermissions.addListener('click', function(button, event) {
        gotoXACMLPage(ADRCollection.pid);
      });
    }

    // Permission to edit child permissions are assumed to be negative unless explicitly true.
    editChildPermissions.disable();
    if (UserCollectionPermissions.manage_canEditChildPermissions) {
      editChildPermissions.enable();
    
      editChildPermissions.addListener('click', function(button, event) {
        gotoXACMLPage(ADRCollection.pid, 'CHILD_SECURITY');
      });
    }

    // Permission to delete collections are assumed to be negative unless explicitly true.
    deleteObject.disable();
    if (UserCollectionPermissions.manage_canDeleteObject) {
      deleteObject.enable();
      
      deleteObject.addListener('click', function(button, event) {
        Ext.Msg.confirm('Delete', 'Are you sure you want to delete this Object?', function(btn, text){
          if (btn == 'yes') {
            var pid = ADRCollection.pid;
            Ext.Ajax.request({
              url: '/adrcollection/ajax/deleteObject',
              success: function(response, opts) {
                var obj = Ext.decode(response.responseText);
                if(obj.success) {
                  // Redirect to top collection for now.
                  var location = window.location;
                  var page = location.protocol + '//' + location.host + '/fedora/repository/';
                  window.location = page;
                }
                else {
                  Ext.Msg.alert('Failure', obj.msg);
                }

              },
              failure: function(response, opts) {
                Ext.Msg.alert('Failure', 'Failed to Delete Object.');
              },
              params: {
                pid: pid
              }
            });

          }
        });
      });
    }
  }
});
Ext.reg('manage', Manage);